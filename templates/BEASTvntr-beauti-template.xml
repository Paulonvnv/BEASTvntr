<beast version='2.0'
       namespace='beast.app.beauti:beast.core:beast.evolution.branchratemodel:beast.evolution.speciation:beast.evolution.tree.coalescent:beast.core.util:beast.evolution.nuc:beast.evolution.operators:beast.evolution.sitemodel:beast.evolution.substitutionmodel:beast.evolution.likelihood:beast.evolution:beast.math.distributions'>
       
    <mergewith point='substModelTemplates'>

        <subtemplate id='Sainudiin' class='beast.evolution.substitutionmodel.Sainudiin' mainid='Sainudiin.s:$(n)'>
            <![CDATA[
            <plugin spec='Sainudiin' id='Sainudiin.s:$(n)'>
                <parameter id="biasMagnitude.s:$(n)" name='biasMagnitude' value='0.0' estimate='true' lower='0.0'/>
                <parameter id="focalState.s:$(n)" name='focalState' value='1.0' lower='1.0' upper='15.0' estimate='true'/>
                <parameter id="g.s:$(n)" name='g' value='0.0' lower='0.0' upper='1.0' estimate='true'/>
                <parameter id="a1.s:$(n)" name='a1' value='1.0' lower='0.0' estimate='true'/>
                <frequencies id='estimatedFreqs.s:$(n)' spec='Frequencies'>
                    <frequencies id='freqParameter.s:$(n)' spec='parameter.RealParameter' dimension='16' value='0.0625' lower='0' upper='1'/>
                    <!-- dimension and value get's corrected by Sainudiin -->
                </frequencies>
            </plugin>
            <plugin id='biasMagnitudeWalker.s:$(n)' spec='RealRandomWalkOperator' windowSize="0.01" weight="0.1" parameter="@biasMagnitude.s:$(n)"/>
            <plugin id='focalStateWalker.s:$(n)' spec='RealRandomWalkOperator' windowSize="0.01" weight="0.1" parameter="@focalState.s:$(n)"/>
            <plugin id='gWalker.s:$(n)' spec='RealRandomWalkOperator' windowSize="0.01" weight="0.1" parameter="@g.s:$(n)"/>
            <plugin id='a1Walker.s:$(n)' spec='RealRandomWalkOperator' windowSize="0.01" weight="0.1" parameter="@a1.s:$(n)"/>
            <plugin id='FrequenciesExchanger.s:$(n)' spec='DeltaExchangeOperator' delta="0.01" weight="0.1" parameter="@freqParameter.s:$(n)"/>

            <prior id='biasMagnitudePrior.s:$(n)' x='@biasMagnitude.s:$(n)'>
				<distr spec="beast.math.distributions.Uniform" lower='0' upper="Infinity"/>
            </prior>
            <prior id='focalStatePrior.s:$(n)' x='@focalState.s:$(n)'>
                <distr spec="beast.math.distributions.Uniform" lower='1.0' upper='15.0'/>
            </prior>
            <prior id='gPrior.s:$(n)' x='@g.s:$(n)'>
				<distr spec="beast.math.distributions.Uniform" lower='0' upper='1'/>
            </prior>
            <prior id='a1Prior.s:$(n)' x='@a1.s:$(n)'>
                <distr spec="beast.math.distributions.Uniform" lower='0' upper="Infinity"/>
            </prior>
]]>

            <connect srcID='biasMagnitude.s:$(n)' targetID='state' inputName='stateNode'
                     if='inlikelihood(biasMagnitude.s:$(n)) and biasMagnitude.s:$(n)/estimate=true'/>
            <connect srcID='focalState.s:$(n)' targetID='state' inputName='stateNode'
                     if='inlikelihood(focalState.s:$(n)) and focalState.s:$(n)/estimate=true'/>
            <connect srcID='g.s:$(n)' targetID='state' inputName='stateNode'
                     if='inlikelihood(g.s:$(n)) and g.s:$(n)/estimate=true'/>         
            <connect srcID='a1.s:$(n)' targetID='state' inputName='stateNode'
                     if='inlikelihood(a1.s:$(n)) and a1.s:$(n)/estimate=true'/>
            <connect srcID='freqParameter.s:$(n)' targetID='state' inputName='stateNode'
                     if='inlikelihood(Sainudiin.$(n)) and inlikelihood(freqParameter.s:$(n)) and freqParameter.s:$(n)/estimate=true'/>

            <connect srcID='biasMagnitudeWalker.s:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(biasMagnitude.s:$(n)) and biasMagnitude.s:$(n)/estimate=true'>
            </connect>
            <connect srcID='focalStateWalker.s:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(focalState.s:$(n)) and focalState.s:$(n)/estimate=true'/>
            <connect srcID='gWalker.s:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(g.s:$(n)) and g.s:$(n)/estimate=true'>
            </connect>
            <connect srcID='a1Walker.s:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(a1.s:$(n)) and a1.s:$(n)/estimate=true'>
            </connect>
            <connect srcID='FrequenciesExchanger.s:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(Sainudiin.$(n)) and inlikelihood(freqParameter.s:$(n)) and freqParameter.s:$(n)/estimate=true'>
                Exchange values of frequencies of partition s:$(n)
            </connect>

            <connect srcID='biasMagnitude.s:$(n)' targetID='tracelog' inputName='log'
                     if='inlikelihood(biasMagnitude.s:$(n)) and biasMagnitude.s:$(n)/estimate=true'/>
            <connect srcID='focalState.s:$(n)' targetID='tracelog' inputName='log'
                     if='inlikelihood(focalState.s:$(n)) and focalState.s:$(n)/estimate=true'/>
            <connect srcID='g.s:$(n)' targetID='tracelog' inputName='log'
                     if='inlikelihood(g.s:$(n)) and g.s:$(n)/estimate=true'/> 
            <connect srcID='a1.s:$(n)' targetID='tracelog' inputName='log'
                     if='inlikelihood(a1.s:$(n)) and a1.s:$(n)/estimate=true'/>
            <connect srcID='freqParameter.s:$(n)' targetID='tracelog' inputName='log'
                     if='inlikelihood(Sainudiin.$(n)) and inlikelihood(freqParameter.s:$(n)) and freqParameter.s:$(n)/estimate=true'/>

            <connect srcID='biasMagnitudePrior.s:$(n)' targetID='prior' inputName='distribution'
                     if='inlikelihood(biasMagnitude.s:$(n)) and biasMagnitude.s:$(n)/estimate=true'>
            </connect>
            <connect srcID='focalStatePrior.s:$(n)' targetID='prior' inputName='distribution'
                     if='inlikelihood(focalState.s:$(n)) and focalState.s:$(n)/estimate=true'>
            </connect>
            <connect srcID='gPrior.s:$(n)' targetID='prior' inputName='distribution'
                     if='inlikelihood(g.s:$(n)) and g.s:$(n)/estimate=true'>
            </connect>
            <connect srcID='a1Prior.s:$(n)' targetID='prior' inputName='distribution'
                     if='inlikelihood(a1.s:$(n)) and a1.s:$(n)/estimate=true'>
            </connect>
        </subtemplate>

        <subtemplate id='SainudiinFrequenciesComputed' class='beast.evolution.substitutionmodel.SainudiinFrequenciesComputed' mainid='SainudiinFrequenciesComputed.s:$(n)'>
            <![CDATA[
            <plugin spec='SainudiinFrequenciesComputed' id='SainudiinFrequenciesComputed.s:$(n)'>
                <parameter id="biasMagnitude.s:$(n)" name='biasMagnitude' value='0.0' estimate='true' lower='0.0'/>
                <parameter id="focalState.s:$(n)" name='focalState' value='1.0' lower='1.0' upper='15.0' estimate='true'/>
                <parameter id="g.s:$(n)" name='g' value='0.0' lower='0.0' upper='1.0' estimate='true'/>
                <parameter id="a1.s:$(n)" name='a1' value='1.0' lower='0.0' estimate='true'/>
            </plugin>
            <plugin id='biasMagnitudeWalker.s:$(n)' spec='RealRandomWalkOperator' windowSize="0.01" weight="0.1" parameter="@biasMagnitude.s:$(n)"/>
            <plugin id='focalStateWalker.s:$(n)' spec='RealRandomWalkOperator' windowSize="0.01" weight="0.1" parameter="@focalState.s:$(n)"/>
            <plugin id='gWalker.s:$(n)' spec='RealRandomWalkOperator' windowSize="0.01" weight="0.1" parameter="@g.s:$(n)"/>
            <plugin id='a1Walker.s:$(n)' spec='RealRandomWalkOperator' windowSize="0.01" weight="0.1" parameter="@a1.s:$(n)"/>

            <prior id='biasMagnitudePrior.s:$(n)' x='@biasMagnitude.s:$(n)'>
				<distr spec="beast.math.distributions.Uniform" lower='0' upper="Infinity"/>
            </prior>
            <prior id='focalStatePrior.s:$(n)' x='@focalState.s:$(n)'>
                <distr spec="beast.math.distributions.Uniform" lower='1.0' upper='15.0'/>
            </prior>
            <prior id='gPrior.s:$(n)' x='@g.s:$(n)'>
				<distr spec="beast.math.distributions.Uniform" lower='0' upper='1'/>
            </prior>
            <prior id='a1Prior.s:$(n)' x='@a1.s:$(n)'>
                <distr spec="beast.math.distributions.Uniform" lower='0' upper="Infinity"/>
            </prior>
]]>

            <connect srcID='biasMagnitude.s:$(n)' targetID='state' inputName='stateNode'
                     if='inlikelihood(biasMagnitude.s:$(n)) and biasMagnitude.s:$(n)/estimate=true'/>
            <connect srcID='focalState.s:$(n)' targetID='state' inputName='stateNode'
                     if='inlikelihood(focalState.s:$(n)) and focalState.s:$(n)/estimate=true'/>
            <connect srcID='g.s:$(n)' targetID='state' inputName='stateNode'
                     if='inlikelihood(g.s:$(n)) and g.s:$(n)/estimate=true'/>         
            <connect srcID='a1.s:$(n)' targetID='state' inputName='stateNode'
                     if='inlikelihood(a1.s:$(n)) and a1.s:$(n)/estimate=true'/>


            <connect srcID='biasMagnitudeWalker.s:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(biasMagnitude.s:$(n)) and biasMagnitude.s:$(n)/estimate=true'>
            </connect>
            <connect srcID='focalStateWalker.s:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(focalState.s:$(n)) and focalState.s:$(n)/estimate=true'/>
            <connect srcID='gWalker.s:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(g.s:$(n)) and g.s:$(n)/estimate=true'>
            </connect>
            <connect srcID='a1Walker.s:$(n)' targetID='mcmc' inputName='operator'
                     if='inlikelihood(a1.s:$(n)) and a1.s:$(n)/estimate=true'>
            </connect>

            <connect srcID='biasMagnitude.s:$(n)' targetID='tracelog' inputName='log'
                     if='inlikelihood(biasMagnitude.s:$(n)) and biasMagnitude.s:$(n)/estimate=true'/>
            <connect srcID='focalState.s:$(n)' targetID='tracelog' inputName='log'
                     if='inlikelihood(focalState.s:$(n)) and focalState.s:$(n)/estimate=true'/>
            <connect srcID='g.s:$(n)' targetID='tracelog' inputName='log'
                     if='inlikelihood(g.s:$(n)) and g.s:$(n)/estimate=true'/> 
            <connect srcID='a1.s:$(n)' targetID='tracelog' inputName='log'
                     if='inlikelihood(a1.s:$(n)) and a1.s:$(n)/estimate=true'/>

            <connect srcID='biasMagnitudePrior.s:$(n)' targetID='prior' inputName='distribution'
                     if='inlikelihood(biasMagnitude.s:$(n)) and biasMagnitude.s:$(n)/estimate=true'>
            </connect>
            <connect srcID='focalStatePrior.s:$(n)' targetID='prior' inputName='distribution'
                     if='inlikelihood(focalState.s:$(n)) and focalState.s:$(n)/estimate=true'>
            </connect>
            <connect srcID='gPrior.s:$(n)' targetID='prior' inputName='distribution'
                     if='inlikelihood(g.s:$(n)) and g.s:$(n)/estimate=true'>
            </connect>
            <connect srcID='a1Prior.s:$(n)' targetID='prior' inputName='distribution'
                     if='inlikelihood(a1.s:$(n)) and a1.s:$(n)/estimate=true'>
            </connect>
        </subtemplate>
    </mergewith>
</beast>
